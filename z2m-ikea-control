
# this is forked from https://gist.github.com/pavax/4ab861e102a37343fc5c39ea371bfb1a, 
# thanks pavax for doing everything :) I only changed trigger and command filter to
# make it work for my scenario

blueprint:
  name: '[Z2M] Generic Ikea Remote Control - Using state instead of action'
  description: Blueprint for Ikea Remote Controls (On/Off, 5-Button, Shortuct)
  domain: automation
  input:
    remote:
      name: Remote
      description: IKEA remote to use (e.g sensor.kitchen_remote_action)
      selector:
        entity:
          integration: mqtt
          domain: sensor
          multiple: false
    light:
      name: Light
      description: Select the light entity you wish to control.
      selector:
        entity:
          domain: light
          multiple: false
    speed:
      name: Speed
      description: The speed in which to update the light when the button is held.
      selector:
        number:
          min: 0.0
          max: 1000.0
          step: 50.0
          unit_of_measurement: milliseconds
          mode: slider
      default: 100
    color_step_hue:
      name: Color Step Hue
      description: The color step change for the hue value
      selector:
        number:
          min: 1.0
          max: 360.0
          step: 1.0
          unit_of_measurement: hue
          mode: slider
      default: 10
    color_step_sat:
      name: Color Step Saturation
      description: The color step change for the saturation value
      selector:
        number:
          min: 1.0
          max: 100.0
          step: 1.0
          unit_of_measurement: saturation
          mode: slider
      default: 5
mode: restart
max_exceeded: silent
trigger:
- platform: state
  entity_id: !input remote
variables:
  command: '{{ trigger.to_state.state }}'
  var_light: !input light
  var_speed: !input speed
  var_color_step_hue: !input color_step_hue
  var_color_step_sat: !input color_step_sat
condition:
- condition: template
  value_template: '{{ command != ''''}}'
action:
- choose:
  # - conditions:
  #   - '{{ command == ''on'' }}'
  #   sequence: !input on_button_short
  # - conditions:
  #   - '{{ command == ''off'' }}'
  #   sequence: !input off_button_short
  # - conditions:
  #   - '{{ command == ''brightness_move_up'' }}'
  #   sequence: !input on_button_long
  # - conditions:
  #   - '{{ command == ''brightness_move_down'' }}'
  #   sequence: !input off_button_long
  # - conditions:
  #   - '{{ command == ''toggle'' }}'
  #   sequence: !input toggle
  - conditions:
    - '{{ command == ''arrow_left_click'' }}'
    sequence:
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          target:
            entity_id: !input light
          data:
            hs_color:
            - '{{(state_attr(var_light, "hs_color")[0] + var_color_step_hue) % 360}}'
            - '{{ state_attr(var_light, "hs_color")[1] }}'
            transition: '{{ (var_speed / 1000)|float }}'
        - delay:
            milliseconds: !input speed
  # - conditions:
  #   - '{{ command == ''arrow_right_click'' }}'
  #   sequence: !input arrow_right_click
  # - conditions:
  #   - '{{ command == ''brightness_up_click'' }}'
  #   sequence: !input brightness_up_click
  # - conditions:
  #   - '{{ command == ''brightness_down_click'' }}'
  #   sequence: !input brightness_down_click
